package lib

import (
	"fmt"
	"reflect"
)

/*
   alpmbuild â€” a tool to build arch packages from RPM specfiles

   Copyright (C) 2020  Carson Black

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

type PackageContext struct {
	// Single-value fields with relatively standard behaviour.
	Name    string `macro:"name" key:"name:" pkginfo:"pkgname"`
	Summary string `macro:"summary" key:"summary:" pkginfo:"pkgdesc"`
	License string `macro:"license" key:"license:" pkginfo:"pkglicense"`
	URL     string `macro:"url" key:"url:" pkginfo:"url"`

	// Array fields with relatively standard behaviour.
	Requires      []string `keyArray:"requires:" pkginfo:"depend"`
	BuildRequires []string `keyArray:"buildrequires:" pkginfo:"makedepend"`

	// Nonstandard single-value fields
	Version string `macro:"version" key:"version:"`
	Release string `macro:"release" key:"release:"`

	// Nonstandard array fields
	Sources []string

	// Other fields
	Subpackages map[string]PackageContext
}

func (pkg PackageContext) GeneratePackageInfo() string {
	packageInfo := "# Generated by alpmbuild"

	fields := reflect.TypeOf(pkg)
	num := fields.NumField()

	for i := 0; i < num; i++ {
		field := fields.Field(i)

		if packageInfoKey := field.Tag.Get("pkginfo"); packageInfoKey != "" {
			// These are the single-value keys, such as Name, Version, Release, and Summary
			if field.Tag.Get("key") != "" {
				// We assert that packageContext only has string fields here.
				// If it doesn't, our code will break.
				key := reflect.ValueOf(&pkg).Elem().FieldByName(field.Name)
				if key.IsValid() {
					packageInfo = fmt.Sprintf("%s\n%s = %s", packageInfo, packageInfoKey, key.String())
				}
			}
			// These are the multi-value keys, such as Requires and BuildRequires
			if field.Tag.Get("keyArray") != "" {
				// We assume that packageContext only has string array fields here.
				// If it doesn't, our code will break.
				key := reflect.ValueOf(&pkg).Elem().FieldByName(field.Name)
				if key.IsValid() {
					keyInterface := key.Interface()
					keyArray := keyInterface.([]string)

					for _, item := range keyArray {
						packageInfo = fmt.Sprintf("%s\n%s = %s", packageInfo, packageInfoKey, item)
					}
				}
			}
		}
	}

	{ // This turns version and release into a single key
		packageInfo = fmt.Sprintf("%s\npkgver = %s-%s", packageInfo, pkg.Version, pkg.Release)
	}

	return packageInfo
}
